----------------------------------------------------------------------------------------------------------------------
bind_stalker.actor_binder.net_destroy = function(self)
	--utils_data.debug_write("actor net destroy start")
	
	local sm = surge_manager.get_surge_manager()
	if (sm) then sm:finalize() end
	sm = psi_storm_manager.get_psi_storm_manager()
	if (sm) then sm:finalize() end 
	if (blood_moon_manager) then
		sm = blood_moon_manager.get_blood_moon_manager()
		if (sm) then sm:finalize() end
	end
	if (crawling_mist_manager) then
		sm = crawling_mist_manager.get_cmist_manager()
		if (sm) then sm:finalize() end
	end
	sm = level_weathers.get_weather_manager()
	if (sm) then sm:finalize() end
	
	xr_sound.stop_sounds_by_id(self.object:id())
	
	if (USE_MARSHAL) then 
		UnregisterScriptCallback("save_state",self)
	end

	bind_stalker_ext.actor_on_net_destroy(self)
	
	level.show_weapon(true)
	db.del_actor(self.object)
	db.delete_enemy(self.object)

	-- remove callbacks
	local t = {
				-- vanilla
				callback.inventory_info,
				callback.on_item_take,
				callback.on_item_drop,
				callback.task_state,
				callback.trade_sell_buy_item,
				callback.take_item_from_box,
				callback.use_object,
				
				-- coc
				callback.hud_animation_end,
				callback.hit,
				callback.key_press,
				callback.key_release,
				callback.key_hold,
				callback.actor_before_death,
				callback.on_attach_vehicle,
				callback.on_detach_vehicle,
				callback.on_use_vehicle,
				callback.weapon_fired,
				callback.weapon_jammed,
				callback.weapon_zoom_in,
				callback.weapon_zoom_out,
				callback.weapon_magazine_empty,
				callback.weapon_lowered,
				callback.weapon_raised,
				callback.weapon_no_ammo,
				callback.item_to_slot,
				callback.item_to_belt,
				callback.item_to_ruck,
				callback.on_foot_step
	}
	for i=1,#t do 
		if (t[i]) then 
			self.object:set_callback(t[i])
		end
	end

	if(_G.amb_vol~=0) then
		exec_console_cmd("snd_volume_eff "..tostring(_G.amb_vol))
		_G.amb_vol = 0
	end
	if(_G.mus_vol~=0) then
	    exec_console_cmd("snd_volume_music "..tostring(_G.mus_vol))
		_G.mus_vol = 0
	end
	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:destroy()
		sr_psy_antenna.psy_antenna = false
	end
	
	object_binder.net_destroy(self)	
	--utils_data.debug_write("actor net destroy end")
end
----------------------------------------------------------------------------------------------------------------------
bind_stalker.actor_binder.save_state = function(self, m_data)
	--utils_data.debug_write(strformat("actor_binder:save_state BEFORE"))
	
	local state = alife_storage_manager.get_game_object_state(self.object,true)
	
	if not (state.actor_binder) then 
		state.actor_binder = {} 
	end 
	
	state.actor_binder.game_difficulty = level.get_game_difficulty()
	state.actor_binder.disable_input_time = self.st.disable_input_time
	state.actor_binder.simulation_started = SIMBOARD.simulation_started
	--state.actor_binder.last_level_name = self.last_level_name
	state.actor_binder.active_slot = self.object:active_slot()
	state.actor_binder.last_detective_achievement_spawn_time = self.last_detective_achievement_spawn_time
	state.actor_binder.last_mutant_hunter_achievement_spawn_time = self.last_mutant_hunter_achievement_spawn_time
	state.actor_binder.character_icon = self.character_icon
	
	if (sr_psy_antenna.psy_antenna and sr_psy_antenna.psy_antenna.global_state ~= 0 and not level_changing()) then 
		sr_psy_antenna.psy_antenna:save_state(m_data)
	end
	
	game_statistics.save_state(m_data)
	inventory_upgrades.save_state(m_data)
	xr_sound.actor_save_state(state)
	task_manager.save_state(m_data)
	level_weathers.get_weather_manager():save_state(m_data)
	surge_manager.save_state(m_data)
	psi_storm_manager.save_state(m_data)
	if (blood_moon_manager) then
		blood_moon_manager.save_state(m_data)
	end
	if (crawling_mist_manager) then
		crawling_mist_manager.save_state(m_data)
	end
	db.storage[0].pstor = db.storage[0].pstor or {}
	--utils_data.debug_write(strformat("actor_binder:save_state AFTER"))
end

bind_stalker.actor_binder.load_state = function(self, m_data)
	local state = alife_storage_manager.get_game_object_state(self.object)
	if not (state and state.actor_binder) then 
		return 
	end
	--utils_data.debug_write("actor_binder:load_state before")
	local game_difficulty_by_num = {
				[0] = "gd_novice",
				[1] = "gd_stalker",
				[2] = "gd_veteran",
				[3] = "gd_master"
				}
	exec_console_cmd("g_game_difficulty "..game_difficulty_by_num[state.actor_binder.game_difficulty or 3])
	self.st.disable_input_time = state.actor_binder.disable_input_time
	SIMBOARD.simulation_started = state.actor_binder.simulation_started
	--self.last_level_name = state.actor_binder.last_level_name
	self.loaded_active_slot = state.actor_binder.active_slot or 0
	self.last_detective_achievement_spawn_time = state.actor_binder.last_detective_achievement_spawn_time
	self.last_mutant_hunter_achievement_spawn_time = state.actor_binder.last_mutant_hunter_achievement_spawn_time
	self.character_icon = state.actor_binder.character_icon
	
	if (sr_psy_antenna.psy_antenna) then 
		sr_psy_antenna.psy_antenna:load_state(m_data)
	end
	
	game_statistics.load_state(m_data)
	inventory_upgrades.load_state(m_data)
	xr_sound.actor_load_state(state)
	task_manager.load_state(m_data)
	level_weathers.get_weather_manager():load_state(m_data)
	surge_manager.load_state(m_data)
	psi_storm_manager.load_state(m_data)
	if (blood_moon_manager) then
		blood_moon_manager.load_state(m_data)
	end
	if (crawling_mist_manager) then
		crawling_mist_manager.load_state(m_data)
	end
	
	if (state.pstor_all) then 
		db.storage[0].pstor = state.pstor_all
		state.pstor_all = nil
	end 

	if (state.pstor_ctime) then
		db.storage[0].pstor_ctime = state.pstor_ctime
		state.pstor_ctime = nil
	end
	
	state.actor_binder = nil
	--utils_data.debug_write("actor_binder:load_state after")
end 

