SL = ui_sleep_dialog.UISleep
original_func = SL.TestAndShow
function SL:TestAndShow(force) 
	if (force ~= true) and (not blood_moon_mcm.get_config("sleepless_blood_moon")) then
		local blood_moon = blood_moon_manager.blood_moon_started()
		if blood_moon then
			actor_menu.set_msg(1, game.translate_string("st_sleep_blood_moon"), 4)
			disable_info("sleep_active")
			return
		end
	end
	original_func(self, force)
end

ui_sleep_dialog.dream_callback = function()
	if ui_sleep_dialog.GUI.forced then
		level.add_cam_effector("camera_effects\\surge_01.anm", 10, false, "ui_sleep_dialog.dream_callback2")
	else
		level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "ui_sleep_dialog.dream_callback2")
	end
	
	local last_blood_moon_time = blood_moon_manager.BloodMoonManager and blood_moon_manager.BloodMoonManager.last_blood_moon_time or game.get_game_time()
	local g_time = game.get_game_time()
	local blood_moon_start = math.floor(blood_moon_manager.BloodMoonManager._delta - g_time:diffSec(last_blood_moon_time))
	c = math.floor(blood_moon_start/3600)

	local hours = ui_sleep_dialog.GUI.forced or ui_sleep_dialog.GUI.time_track:GetIValue()
	printf("Time edited because of blood moon: %s - before", hours)
	if (not blood_moon_mcm.get_config("sleepless_blood_moon")) and (hours > c) then
		hours = c
		actor_menu.set_msg(1, game.translate_string("st_sleep_blood_moon"), 4)
	end
	
	level.change_game_time(0,hours,0)

	db.actor.power = 1

	SendScriptCallback("actor_on_sleep",hours)
end