--Don't forget to define this function if you want to use It!
function pr(...)
    printf(...)
end

-- class instance
CMistManager = nil
function get_cmist_manager()
	CMistManager = CMistManager or CCMistManager()
	return CMistManager
end
---------------------------------------------------------------------
local map_exemptions = {"l03u_agr_underground", "fake_start",  "jupiter_underground", "l08u_brainlab", "l04u_labx18", "l10u_bunker", "labx8", "l12u_control_monolith", "l13u_warlab", "l12u_sarcofag", "l08u_brainlab"}

local surge_time_factor = 10

local prev_sec 				= -1
local prev_game_sec 		= -1
local diff_sec 				= -1
local diff_game_sec			= -1

-- VARIABLES USED FOR SPAWNING FUNCTIONS. MOST CAN BE ADDED TO MCM. MOVE THEM WHERE NEEDED

local available_smart_terrains = {} -- list of availabe smarts for spawning
local cmist_safe_radius = crawling_mist_mcm.get_config("safe_radius") -- add to MCM(done!)
local cmist_max_spawn_radius = crawling_mist_mcm.get_config("max_spider_spawn_radius") -- add to MCM (done!). Squads beyond this distance will be despawned to give way to spawning on nearer smarts.
local cmist_active_spawns = {} -- table containing the npc IDs of all spawned spiders.
local smart_terrain_exemptions = {}
local max_spider_spawn_count =  crawling_mist_mcm.get_config("max_spider_spawn_count") -- add to MCM (done!)- used to adjust max active spider spawns. When a squad is eliminated, script spawns another squad.
local max_spider_squad_size = crawling_mist_mcm.get_config("max_spider_squad_size") -- add to MCM (done!)- I've set ltx squad size to 3 so this will increase squad sizes randomly to this number. Gives squads some variety in squad number
local number_of_spawning_smarts = crawling_mist_mcm.get_config("number_of_spawning_smarts")  -- add to MCM (done!)- used to adjust number of nearest smarts that will spawn mutants.
local squad_count = 0

class "CCMistManager"
function CCMistManager:__init() --Is called upon the creation of the class instance (immediately)
end

function CCMistManager:initialize() --Initializes some important variables
	if not (self._state_loaded) then 
		self.game_time_factor=level.get_time_factor()
		self.last_cmist_time = game.get_game_time()
		self.inited_time = game.get_game_time()
		self.started = false
		self.finished = true
	end 
	
	if not (self._delta) then 
		self:calculate_next_cmist()
	end
	
	self.cmist_duration = 450 -- (duration: 45mins of game time (1 gaem min = 10 irl sec))
	
	self.time_forwarded = false
end

function CCMistManager:start(manual) --Starts the event (this function is called by the command in the debug launcher)
	if not (self._state_loaded) then 
		self:initialize()
	end
	self.game_time_factor=level.get_time_factor()

	local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
	Y, M, D, h, m, s, ms = self.last_cmist_time:get(Y, M, D, h, m, s, ms)
	if(manual or not self.inited_time) then
		self.inited_time = game.get_game_time()
	else
		self.inited_time:set(Y, M, D, h, m, s + self._delta, ms)
	end

	diff_sec = math.ceil(game.get_game_time():diffSec(self.inited_time)/level.get_time_factor())
	
	--local flags = {allow = true}
	--SendScriptCallback("on_before_cmist",flags)
		
	local level_name = level.name()
	--pr("Level name = %s", level_name)
	local level_flag = false
	for _, name in ipairs(map_exemptions) do
		if name == level_name then
			level_flag = true
		end
	end
	
	if(diff_sec+6>self.cmist_duration) or level_flag then
		self:skip_cmist()
		level_flag = false
	else
		self.started = true
		self.finished = false
		self.stages = empty_table(self.stages)
		level.set_time_factor(surge_time_factor)

		determine_available_smarts() -- Populate available_smart_terrains table

		
		--SendScriptCallback("actor_on_interaction", "anomalies", nil, "cmist_start")
	end
end

function CCMistManager:new_cmist_time() --Defines when the next cmist is gonna happen
	self.last_cmist_time 	= game.get_game_time()
	self:calculate_next_cmist()

end

function CCMistManager:calculate_next_cmist()
	local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
	Y, M, D, h, m, s, ms = self.last_cmist_time:get(Y, M, D, h, m, s, ms)
	
	local freq = crawling_mist_mcm.get_config("frequency")
	local random_days = math.random(math.floor(freq / 2), freq) + math.random() -- Add a random fraction of a day
	local next_event_time = random_days * 86400 - 2700  -- 86400 seconds in a day

	-- Calculate the hour of the next event
	local event_hour = (h + math.floor(next_event_time / 3600)) % 24

	-- Adjust to ensure the event is in the morning
	if event_hour >= 10 and event_hour < 6 then
		-- If the event falls between 10 AM and 6 AM, adjust to the next 6 AM
		if event_hour < 6 then
			local hours_to_next_morning = 6 - event_hour
		else
			local hours_to_next_morning = (24 - event_hour) + 6
		end
		next_event_time = next_event_time + (hours_to_next_morning * 3600)
	end

	self._delta = next_event_time
end

function CCMistManager:skip_cmist()
	if not (self.inited_time) then 
		self.inited_time = game.get_game_time()
	end
	if not (self.last_cmist_time) then 
		self.last_cmist_time = game.get_game_time()
	end
	local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
	Y, M, D, h, m, s, ms = self.inited_time:get(Y, M, D, h, m, s, ms)
	self.last_cmist_time:set(Y, M, D, h, m, s + self.cmist_duration, ms)

	self:new_cmist_time()

	self.started 			= false
	self.finished 			= true
	
	prev_sec				= 0
	
	level.set_time_factor(self.game_time_factor)
end

function CCMistManager:finalize()
end

function CCMistManager:finish(manual) --Ends the event and is called by the stop cmist command in the debug menu
	self.started 			= false
	self.finished 			= true
	self.last_cmist_time 	= game.get_game_time()

	self:new_cmist_time(false)

	if(manual or (self.time_forwarded and level_weathers.get_weather_manager().weather_fx)) then
		level.stop_weather_fx()
		level_weathers.get_weather_manager():forced_weather_change()
	end
	prev_sec = 0
	
	self.stages = empty_table(self.stages)

	release_all_cmist_spiders()

	level.set_time_factor(self.game_time_factor)
end


----------------------------------
--	Update
----------------------------------
function CCMistManager:update() --this function is called a lot of times consecutively by the main_loop() in surge_manager.script
    if not (self._state_loaded) then 
        self:initialize()
        return
    end

    if not (self.first_update) then 
        self.first_update = true
        local level_name = level.name()
        
        --local flags = {allow = true}
        --SendScriptCallback("on_before_cmist", flags) --Can be used, but someway causes a STACK TRACEBACK (doesn't crash the game, can be seen in the logs)
        
        local diff_sec = math.ceil(game.get_game_time():diffSec(self.inited_time) / level.get_time_factor())
        if (diff_sec + 6 > self.cmist_duration) then
            self:skip_cmist()
            return
        end
    end
    
    SetEvent("cmist", "state", self.started)
	
	if not (self.started) then
        local g_time = game.get_game_time()
        if(self.time_forwarded) then
            local diff = math.abs(self._delta - g_time:diffSec(self.last_cmist_time))
            if(diff < 3600) then
                self._delta = 3 * 3600 + g_time:diffSec(self.last_cmist_time)
            end
            self.time_forwarded = false
        end
        if(g_time:diffSec(self.last_cmist_time) < self._delta) then
            return
        end
        self:start()
        return
    end
	
    diff_sec = math.ceil(game.get_game_time():diffSec(self.inited_time) / level.get_time_factor())
    if (diff_sec >= self.cmist_duration) then 
        self:finish()
        return 
    end 
    
    if (prev_sec ~= diff_sec) then
        prev_sec = diff_sec

        SetEvent("cmist", "time", diff_sec)
        
        if (not crawling_mist_mcm.get_config("state")) then 
            self:finish()
            return
        end

        -- cmist begins -------------------------------------------------------------------------
		pr("!cmist starting")
        if (diff_sec >= 0) and (self.stages['beginning'] == nil) then
			if (surge_manager.is_started() or psi_storm_manager.is_started()) then
				level.stop_weather_fx()
			end
			level.set_weather_fx("fx_crawling_mist_day")
            self.stages['beginning'] = true
        end
		if (diff_sec % 50 == 0) then
			release_distant_npcs(cmist_max_spawn_radius)
			spawn_spiders_on_nearest_smarts() -- spawn spiders
		end
    end
end

----------------------------------
--	Data management
----------------------------------
function save_state(m_data)
	--utils_data.debug_write("CMistManager:save_state BEFORE")
	m_data.CMistManager = {}
	m_data.cmist_active_spawns = cmist_active_spawns
	
	local mgr = get_cmist_manager()
	if not (mgr._state_loaded) then
		mgr:initialize()
		mgr._state_loaded = true
	end
	
	m_data.CMistManager.finished = mgr.finished == nil and true or mgr.finished
	m_data.CMistManager.started = mgr.started == nil and false or mgr.started
	m_data.CMistManager.last_cmist_time = mgr.last_cmist_time and utils_data.CTime_to_table(mgr.last_cmist_time) or game.get_game_time()
	if (mgr.started) then 
		m_data.CMistManager.inited_time = mgr.inited_time and utils_data.CTime_to_table(mgr.inited_time) or game.get_game_time()
		m_data.CMistManager.game_time_factor = mgr.game_time_factor
	end
	m_data.CMistManager._delta = mgr._delta
	--utils_data.debug_write("CMistManager:save_state AFTER")
end 

function load_state(m_data)
	if not (m_data.CMistManager) then 
		return
	end
	cmist_active_spawns = m_data.cmist_active_spawns
	--utils_data.debug_write("CMistManager:load_state BEFORE")
	local mgr = get_cmist_manager()
	mgr:initialize()
	mgr.finished = m_data.CMistManager.finished
	mgr.started = m_data.CMistManager.started
	mgr.last_cmist_time = m_data.CMistManager.last_cmist_time and utils_data.CTime_from_table(m_data.CMistManager.last_cmist_time) or game.get_game_time()
	if (mgr.started == true and mgr.finished == false) then 
		mgr.inited_time = m_data.CMistManager.inited_time and utils_data.CTime_from_table(m_data.CMistManager.inited_time) or game.get_game_time()
		mgr.game_time_factor = m_data.CMistManager.game_time_factor or level.get_time_factor()
		mgr.stages = empty_table(mgr.stages)
	else 
		mgr.started = false 
		mgr.finished = true
	end
	mgr._delta = m_data.CMistManager._delta
	mgr._state_loaded = true
	m_data.CMistManager = nil
	--utils_data.debug_write("CMistManager:save_state AFTER")
end 

function actor_on_save(binder,packet)
	if (USE_MARSHAL) then 
		return 
	end
	-- load defaults if not loaded
	local mgr = get_cmist_manager()
	if not (mgr._state_loaded) then
		mgr:initialize()
		mgr._state_loaded = true
	end
	set_save_marker(packet, "save", false, "CMist")
	packet:w_bool(mgr.finished)
	packet:w_bool(mgr.started)
	utils_data.w_CTime(packet, mgr.last_cmist_time)
	if(mgr.started) then
		utils_data.w_CTime(packet, mgr.inited_time)
		packet:w_u32(mgr.game_time_factor)
	end
	packet:w_u32(mgr._delta)
	set_save_marker(packet, "save", true, "CMist")
end 

function actor_on_load(binder,packet)
	local mgr = get_cmist_manager()
	if not (mgr._state_loaded) then
		mgr:initialize()
		mgr._state_loaded = true
	end
	if (USE_MARSHAL) then 
		return 
	end 
	set_save_marker(packet, "load", false, "CMist")
	mgr.finished = packet:r_bool()
	mgr.started = packet:r_bool()
	mgr.last_cmist_time = utils_data.r_CTime(packet)
	if(mgr.started) then
		mgr.inited_time = utils_data.r_CTime(packet)
		mgr.game_time_factor = packet:r_u32()
		mgr.stages = empty_table(mgr.stages)
		mgr.stages = empty_table(mgr.stages)
	end
	mgr._delta = packet:r_u32()
	set_save_marker(packet, "load", true, "CMist")
end 


----------------------------------
--	Utilities
----------------------------------
function start_cmist(p)
	if get_cmist_manager() then get_cmist_manager():start(true) end
end

function stop_cmist(p)
	if get_cmist_manager() then get_cmist_manager():finish(true) end
end

function is_started()
	return get_cmist_manager().started
end

function is_finished()
	return get_cmist_manager() == nil and true or get_cmist_manager().finished == true
end

function is_loaded()
	return CMistManager and CMistManager._state_loaded == true
end

function distance_3d(p1, p2)
	--return math.sqrt( (b.x-a.x)^2 + (b.z-a.z)^2 )
	return p1:distance_to(p2)
end

function cmist_started()
	if is_loaded() and is_started() then
		return true
	end
	return false
end

function cmist_complete()
	if is_loaded() then
		return is_finished()
	end
	return true
end

-- Utilities for cmist Spawning mutants: %s attempt

function determine_available_smarts()
	load_smart_terrain_exemptions()
    available_smart_terrains = {}
    for i = 1, 65534 do
        local smart = alife_object(i)
        if smart and (smart:clsid() == clsid.smart_terrain) then
            local smart_name = smart:name() or smart:section_name() or "<empty>"
            local smart_level_name = get_se_obj_level_name(smart)
            
            local smart_is_exempt = false
            for index, exempt_smart in pairs(smart_terrain_exemptions) do
                if exempt_smart == tostring(smart_name) then
                    smart_is_exempt = true
                    break
                end 
            end

            local smart_is_on_current_level = false
            if tostring(smart_level_name) == tostring(level.name()) then
                smart_is_on_current_level = true
            end

            if (smart_is_exempt == false) and smart_is_on_current_level then
                available_smart_terrains[smart_level_name] = available_smart_terrains[smart_level_name] or {}
                table.insert(available_smart_terrains[smart_level_name], smart.id)
            end
        end
    end
	return available_smart_terrains
end

function load_smart_terrain_exemptions()
    local ini_config = ini_file("plugins\\crawling_mist_configs.ltx")
    
    smart_terrain_exemptions = {}

    local line_count = ini_config:line_count("smart_terrain_exemptions")
    for i = 0, line_count - 1 do
        local result, id, value = ini_config:r_line_ex("smart_terrain_exemptions", i, "", "")
        if id then
            table.insert(smart_terrain_exemptions, id)
        end
    end
end

function get_se_obj_level_name(se_obj)
    local vertex = game_graph():vertex(se_obj.m_game_vertex_id)
    if not vertex then
        return "<unknown>"
    end

    local target_level_id = vertex:level_id()
    local target_level_name = alife():level_name(target_level_id)
    return target_level_name
end

function is_npc_beyond_distance(npc_id, distance)
	local npc = alife_object(npc_id)
	if npc then
	  if npc and npc.position then
		local actor_pos = db.actor:position()
		local npc_pos = npc.position
		return actor_pos:distance_to(npc_pos) > distance
	  else
		pr("Warning: Npc not found or position unavailable for npc: %s", npc_id)
		return false 
	  end
	else
	  return false 
	end
  end

function release_distant_npcs(distance)
	local npcs_to_remove = {} 
  
	for i, spawn in ipairs(cmist_active_spawns) do
	  if is_npc_beyond_distance(spawn.npc_id, distance) then
		table.insert(npcs_to_remove, i)
	  end
	end
  
	for i = #npcs_to_remove, 1, -1 do 
	  local index = npcs_to_remove[i]
	  local npc_id = cmist_active_spawns[index].npc_id
	  local npc = alife_object(npc_id)
  
	  if npc then
		safe_release_manager.release(npc)
		table.remove(cmist_active_spawns, index)
		pr("cmist: Released distant npc: %s", npc_id)
	  else
		pr("Warning: Npcs %s not found for release.", npc_id)
	  end
	end
end
  

function calculate_smart_distances()
	local distances = {}
	local actor_pos = db.actor:position()
	
	for _, smart_id in ipairs(available_smart_terrains[level.name()]) do
		local smart = alife_object(smart_id)
		if smart then
		local smart_pos = smart.position
		local distance = actor_pos:distance_to(smart_pos)
		distances[smart_id] = distance
		end
	end
	
	return distances
end

function get_sorted_smart_ids()
	local distances = calculate_smart_distances()
	local sorted_smart_ids = {}

	for smart_id, distance in pairs(distances) do
		if (distance > cmist_safe_radius) and (distance < cmist_max_spawn_radius) then 
			table.insert(sorted_smart_ids, {smart_id = smart_id, distance = distance})
		end
	end
		
	table.sort(sorted_smart_ids, function(a, b) return a.distance < b.distance end)

	local result = {}
	for i,entry in ipairs(sorted_smart_ids) do
		result[i] = entry.smart_id
	end

	return result
end

function read_ltx_section(filename,section,field)
	local ini = ini_file(filename)
	local value = ini and ini:r_string_ex(section,field) or "nil"
    return value
end

function spawn_spiders_on_nearest_smarts()
    local nearest_smarts = get_sorted_smart_ids()
    local smarts_to_use = {}
	local squad_size_by_level = tonumber(read_ltx_section("plugins\\crawling_mist_configs.ltx", "squad_size_by_level", level.name())) or 3
	local new_squad_size = math.min(max_spider_squad_size, squad_size_by_level)

    for i = 1, math.min(number_of_spawning_smarts, #nearest_smarts) do
        table.insert(smarts_to_use, nearest_smarts[i])
    end

    for _, smart_id in ipairs(smarts_to_use) do
        if squad_count <= max_spider_spawn_count then
            local smart = alife_object(smart_id)
            if smart then
                local squad = SIMBOARD:create_squad(smart, "crawling_mist_spiders")
				squad_count = squad_count + 1
				if squad and squad.commander_id then
					add_squad_members(squad, new_squad_size, smart_id)
				end
				for member in squad:squad_members() do
					table.insert(cmist_active_spawns, {npc_id = member.id})
				end
				squad.scripted_target = "actor"
				squad.rush_to_target = true
				pr("Spiders squad spawned on smart [%s], targeting actor. Squad size: %s", smart_id, squad:npc_count())
            end
        end
    end
end

function server_entity_on_unregister(obj)
	if cmist_active_spawns then
		for idx, spawn in ipairs(cmist_active_spawns) do
			if obj.id == spawn.npc_id then
				pr("cmist: Removing npc_id: %s from table", spawn.npc_id)
				table.remove(cmist_active_spawns, idx)
			end
		end
	end
end

function add_squad_members(squad, max_squad_count, smart_id)
	local commander = alife_object(squad:commander_id())
	if commander then
		while squad:npc_count() < max_squad_count do
			local pos = commander.position
			local lvid = commander.m_level_vertex_id
			local gvid = commander.m_game_vertex_id

			local squad_smart = smart_id and SIMBOARD.smarts[smart_id].smrt

			local random_spawn = ini_sys:r_string_ex(squad:section_name(), "npc_random")

			random_spawn = parse_names(random_spawn)
			local random_sec = random_spawn[math.random(1, #random_spawn)]

			local new_member_id = squad:add_squad_member(random_sec, pos, lvid, gvid)
			
			local se_obj = new_member_id and alife_object(new_member_id)
			if se_obj then
				squad_smart:register_npc(se_obj)
				SIMBOARD:setup_squad_and_group(se_obj)
			end

			-- Update the squad
			squad:update()
		end
	end
end

-- will release all remaining spider squads when called. Must be called when cmist ends. No spider explosion yet. They just disappear.
function release_all_cmist_spiders()
	for i = #cmist_active_spawns, 1, -1 do
		pr("Index = %s", i)
		local spawn = cmist_active_spawns[i]
		local npc = get_object_by_id(spawn.npc_id)
		pr("spider goes boom!")
		explode_on_death.explode_npc(npc)
	end
	squad_count = 0
	cmist_active_spawns = {}
end

function on_before_level_changing()
	delete_spiders()
	pr("Level is changing, wiping ReSpawn Mutants")
end


function delete_spiders()
    for idx = #cmist_active_spawns, 1, -1 do
        local spawn = cmist_active_spawns[idx]
        local se_npc= alife_object(spawn.npc_id)

        if se_npc then
            alife_release(se_npc)
            table.remove(cmist_active_spawns, idx)
        else
            pr("Warning: npc id %s does not exist", spawn.npc_id)
        end
    end
end

function on_key_press(key)
    if (key == DIK_keys.DIK_M) and (crawling_mist_mcm.get_config("enable_debug")) then
        local g_time = game.get_game_time()
        local last_cmist_time = CMistManager and CMistManager.last_cmist_time or g_time
        local time_since_last = g_time:diffSec(last_cmist_time)
        local time_until_next = math.max(0, CMistManager._delta - time_since_last)

        local days = math.floor(time_until_next / 86400)
        local remaining_seconds = time_until_next % 86400
        local hours = math.floor(remaining_seconds / 3600)
        remaining_seconds = remaining_seconds % 3600
        local minutes = math.floor(remaining_seconds / 60)

        local display_string = ""
        if days > 0 then
            display_string = display_string .. days .. " day" .. (days > 1 and "s " or " ")
        end
        if hours > 0 then
            display_string = display_string .. hours .. " hour" .. (hours > 1 and "s " or " ")
        end
        display_string = display_string .. minutes .. " minute" .. (minutes > 1 and "s" or "")

        news_manager.send_tip(db.actor, "Before Crawling Mist - " .. display_string, nil, "recent_cmist", nil, nil)
    end

    if (key == DIK_keys.DIK_K) and (crawling_mist_mcm.get_config("enable_debug")) then
        news_manager.send_tip(db.actor, "Spiders alive - " .. tostring(#cmist_active_spawns), nil, "recent_cmist", nil, nil)
    end
end

function actor_on_first_update()
	determine_available_smarts()
end

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
	RegisterScriptCallback("server_entity_on_unregister", server_entity_on_unregister)
	RegisterScriptCallback("on_before_level_changing", on_before_level_changing)
	RegisterScriptCallback("on_key_press", on_key_press)
end
